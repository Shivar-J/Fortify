#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "raycommon.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D outputImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D accumulationImage;
layout(set = 0, binding = 3, std140) uniform RaytracingUBO {
    mat4 view;
    mat4 proj;
    uint vertexSize;
    uint sampleCount;
    uint samplesPerFrame;
    uint rayBounces;
} ubo;

layout(location = 0) rayPayloadEXT RayPayload payload;

void main() {
    ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    vec2 resolution = vec2(imageSize(outputImage));

    vec4 prevAccum = imageLoad(accumulationImage, pixel);

    uint rngState = uint(gl_LaunchIDEXT.x * 1973 + gl_LaunchIDEXT.y * 9277 + ubo.sampleCount * 26699);

    vec2 jitter = vec2(rand(rngState), rand(rngState)) - 0.5;
    vec2 uv = (vec2(pixel) + 0.5 + jitter) / resolution;
    vec2 ndc = uv * 2.0 - 1.0;

    mat4 invProj = inverse(ubo.proj);
    mat4 invView = inverse(ubo.view);
    vec4 rayClip = vec4(ndc, -1.0, 1.0);
    vec4 rayView = invProj * rayClip;
    rayView = vec4(rayView.xy, -1.0, 0.0);

    vec3 rayOrigin = vec3(invView[3]);
    vec3 rayDir = normalize((invView * rayView).xyz);

    payload.rngState = rngState;
    payload.depth = 0;
    payload.color = vec3(0);
    payload.attenuation = vec3(1);
    payload.insideObj = 0;

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsNoneEXT,
        0xFF,
        0, 0, 0,
        rayOrigin,
        1e-9,
        rayDir,
        1e9,
        0
    );

    vec3 newSample = payload.color;
    vec3 accumulated = mix(prevAccum.rgb, newSample, 1.0 / float(ubo.sampleCount));

    imageStore(outputImage, pixel, vec4(accumulated, 1.0));
    imageStore(accumulationImage, pixel, vec4(accumulated, 1.0));
}